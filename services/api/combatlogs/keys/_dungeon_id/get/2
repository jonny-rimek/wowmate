package main

import (
	"context"
	"fmt"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/jonny-rimek/wowmate/services/common/golib"
	"github.com/sirupsen/logrus"
	"net/url"
	"strconv"

	"os"
)

//this could just be a map[string]interface{}, but I kinda prefer to have a set structure
type logData struct {
	Rcu           float64
	DungeonID     int
	EmptyQuery    bool
	FirstPage     bool
	SortAscending bool
	InputNextSk   string
	InputPrevSK   string
}

type paginatedQueryInput struct {
	request      events.APIGatewayV2HTTPRequest
	ddbTableName *string
	dungeonID    int
}

type paginatedQueryOutput struct {
	queryInput    dynamodb.QueryInput
	firstPage     bool
	sortAscending bool
	inputNextSK   string
	inputPrevSK   string
}

var client *dynamodb.Client

func handler(request events.APIGatewayV2HTTPRequest) (events.APIGatewayV2HTTPResponse, error) {
	errMsg := "no error"

	response, logData, err := handle(request)
	if err != nil {
		errMsg = err.Error()
	}

	golib.CanonicalLog(map[string]interface{}{
		"rcu":            logData.Rcu,
		"dungeon_id":     logData.DungeonID,
		"err":            errMsg,
		"empty_query":    logData.EmptyQuery,
		"first_page":     logData.FirstPage,
		"sort_ascending": logData.SortAscending,
		"input_next_sk":  logData.InputNextSk,
		"input_prev_sk":  logData.InputPrevSK,
	})
	return response, err
}

func handle(request events.APIGatewayV2HTTPRequest) (events.APIGatewayV2HTTPResponse, logData, error) {
	var logData logData
	ddbTableName := os.Getenv("DYNAMODB_TABLE_NAME")
	if ddbTableName == "" {
		return golib.AGW500(),
			logData, fmt.Errorf("failed dynamodb table name env var is empty")
	}

	dungeonID, err := checkInput(request.PathParameters["dungeon_id"])
	if err != nil {
		return golib.AGW500(), logData, err
	}
	logData.DungeonID = dungeonID

	paginatedQuery, err := paginatedQuery(paginatedQueryInput{
		request:      request,
		ddbTableName: &ddbTableName,
		dungeonID:    dungeonID,
	})
	if err != nil {
		return golib.AGW500(), logData, err
	}
	logData.FirstPage = paginatedQuery.firstPage
	logData.SortAscending = paginatedQuery.sortAscending
	logData.InputNextSk = paginatedQuery.inputNextSK
	logData.InputPrevSK = paginatedQuery.inputPrevSK

	result, err := golib.DynamoDBQuery2(client, paginatedQuery.queryInput)
	if err != nil {
		return golib.AGW500(), logData, err
	}
	rcu := *result.ConsumedCapacity.CapacityUnits
	logData.Rcu = rcu

	if len(result.Items) == 0 {
		logData.EmptyQuery = true
		return golib.AGW200("", nil), logData, nil
	}

	logrus.Debug(result.Items)

	json, err := golib.PlayerDamageSimpleResponseToJson(result, paginatedQuery.sortAscending, paginatedQuery.firstPage)
	if err != nil {
		return golib.AGW500(), logData, err
	}

	return golib.AGW200(json, map[string]string{
		"Content-type": "application/json",
	}), logData, nil
}

func paginatedQuery(input paginatedQueryInput) (paginatedQueryOutput, error) {
	var expressionAttributeValues = make(map[string]types.AttributeValue)

	expressionAttributeValues[":v1"] = types.AttributeValue(&types.AttributeValueMemberS{
		Value: fmt.Sprintf("LOG#S2#%v", input.dungeonID),
	})

	//this is the default query aka no pagination
	resp := paginatedQueryOutput{
		queryInput: dynamodb.QueryInput{
			TableName:                 input.ddbTableName,
			IndexName:                 aws.String("gsi1"),
			Limit:                     aws.Int32(5 + 1),
			ReturnConsumedCapacity:    types.ReturnConsumedCapacityTotal,
			ScanIndexForward:          aws.Bool(false),
			KeyConditionExpression:    aws.String("gsi1pk = :v1"),
			ExpressionAttributeValues: expressionAttributeValues,
		},
		sortAscending: false,
		firstPage:     true,
	}

	//# becomes %23 inside the query parameter, needs to be transformed back
	next, err := url.QueryUnescape(input.request.QueryStringParameters["next"])
	if err != nil {
		return resp, err
	}
	prev, err := url.QueryUnescape(input.request.QueryStringParameters["prev"])
	if err != nil {
		return resp, err
	}
	resp.inputNextSK = next
	resp.inputPrevSK = prev

	if next != "" { //this is the next page
		resp.firstPage = false

		resp.queryInput.KeyConditionExpression = aws.String("gsi1pk = :v1 AND gsi1sk < :v2")
		expressionAttributeValues[":v2"] = types.AttributeValue(&types.AttributeValueMemberS{
			Value: next,
		})

	} else if prev != "" { //this is the previous page, note the reversed ordering
		resp.firstPage = false
		resp.sortAscending = true
		resp.queryInput.ScanIndexForward = &resp.sortAscending

		resp.queryInput.KeyConditionExpression = aws.String("gsi1pk = :v1 AND gsi1sk > :v2")
		expressionAttributeValues[":v2"] = types.AttributeValue(&types.AttributeValueMemberS{
			Value: prev,
		})
	}

	resp.queryInput.ExpressionAttributeValues = expressionAttributeValues

	return resp, nil
}

func checkInput(input string) (int, error) {
	if input == "" {
		return 0, fmt.Errorf("dungeon id parameter is empty")
	}

	dungeonID, err := strconv.Atoi(input)
	if err != nil {
		return 0, err
	}
	//IMPROVE: we could check it against a list of known dungeon ids

	return dungeonID, nil
}

func init() {
	//I don't get when it makes sense to use init the docs doesnt explain it
	//I tried starting the session here, but no performance difference
	//https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html#golang-handler-state
}

func main() {
	golib.InitLogging()

	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		//not sure how to fail this
		//return
	}
	client = dynamodb.NewFromConfig(cfg)

	lambda.Start(handler)
}
