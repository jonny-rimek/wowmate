name: CI/CD

on:
  pull_request:
    branches: [ prod ]
  push:
    branches: [ prod ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.3'

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      # BUILD CACHES
      # if no go file changes the binaries are cached and don't have to be rebuild
      - name: Cache go builds
        uses: actions/cache@v2
        id: go-build-cache
        with:
          path: dist
          key: go-build-${{ hashFiles('services/**/*.go') }}-${{ hashFiles('services/**/go.sum') }}

      # if no js or vue file changes the services/frontend/dist dir is cached
      - name: Cache frontend build
        uses: actions/cache@v2
        id: frontend-build-cache
        with:
          path: services/frontend/dist
          key: frontend-build-${{ hashFiles('services/frontend/**/*.vue') }}-${{ hashFiles('services/frontend/**/*.js') }}-${{ hashFiles('services/upload/package-lock.json') }}

      # INSTALL CACHES
      # caches all go dependencies
      # can't not get cache if the go build did not change
      - name: Cache go deps
        uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
          restore-keys: go-

      # caches node_modules of presign lambda
      - name: Cache presign npm
        uses: actions/cache@v2
        id: presign-cache
        with:
          path: services/upload/presign/node_modules
          key: presign-${{ hashFiles('services/upload/package-lock.json') }}
          restore-keys: presign-

      # cache dependencies for cdk
      - name: Cache cdk npm
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      # cache dependencies for nuxt frontend
      - name: Cache frontend yarn
        uses: actions/cache@v2
        id: frontend-cache
        with:
          path: services/frontend/node_modules
          key: frontend-${{ hashFiles('services/frontend/yarn.lock') }}
          restore-keys: |
            frontend-

      # INSTALL:
      - name: Install cdk
        if: steps.cdk-cache.outputs.cache-hit != 'true'
        run: ./wm.sh install cdk

      - name: Install go
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: ./wm.sh install go

      - name: Install presign
        if: steps.presign-cache.outputs.cache-hit != 'true'
        run: ./wm.sh install presign

      - name: Install frontend
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        run: ./wm.sh install frontend

      # BUILD:
      # GO
      - name: Build go
        if: steps.go-build-cache.outputs.cache-hit != 'true'
        run: ./wm.sh build go

      - run: |
          cd dist/upload/convert
          ls -lisah

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      # FRONTEND
      # TODO: built another version for preprod and prod
#      - name: Export frontend build env if not prod
#        if: steps.extract-branch.outputs.branch != 'prod'
#        run: echo "##[set-output name=nuxt_env;]$(echo dev)"
#        id: frontend-env
        # this env var is only set in non prod, because it controls the urls the frontend calls
        # if env var is set it's api.dev.wowmate.io, if not it is api.wowmate.io

      - name: Build frontend
        env:
          NUXT_ENV: dev
        if: steps.frontend-build-cache.outputs.cache-hit != 'true'
        run: ./wm.sh build frontend

      - name: Upload go binaries and frontend
        uses: actions/upload-artifact@v2
        with:
          name: go-binaries-and-frontend
          path: |
            dist
            services/frontend/dist

      # DEPLOY TO dev if branch != prod
#      - name: Deploy to dev
#        if: steps.extract-branch.outputs.branch != 'prod'
#        env:
#          CDK_STACK: ${{ steps.cdk-stack.outputs.stack }}
#        run: ./wm.sh deploy dev

#      - name: Configure AWS prod credentials
#        if: steps.extract-branch.outputs.branch != 'prod'
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

      # post diff to prod in pr comment
#      - name: Post cdk Diff as comment to PR
#        if: steps.extract-branch.outputs.branch != 'prod'
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#        run: ./wm.sh diff prod

      # DEPLOY TO PROD if branch == prod
#      - name: Configure AWS prod credentials
#        if: steps.extract-branch.outputs.branch == 'prod'
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

#      - name: Deploy to prod
#        if: steps.extract-branch.outputs.branch == 'prod'
#        env:
#          CDK_STACK: ${{ steps.cdk-prod-stack.outputs.stack }}
#        run: ./wm.sh deploy prod

  cfn-nag:
    runs-on: ubuntu-latest
    needs: setup
    steps:
        # composite actions (https://docs.github.com/en/actions/creating-actions/creating-a-composite-run-steps-action)
        # can only execute run steps and not uses, which means I can't DRY up the setup steps
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: Cache CDK npm
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      - uses: actions/download-artifact@v2
        with:
          name: go-binaries-and-frontend

      - name: Compile CDK typescript
        run: ./wm.sh build cdk

      - name: Synthezise CDK to CFN
        run: ./wm.sh synth

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      - name: Check cfn bestpractices with cfn_nag for dev
        if: steps.extract-branch.outputs.branch != 'prod'
        uses: stelligent/cfn_nag@master
        with:
          input_path: cdk.out/wm-dev.template.json
          extra_args: |
            --print-suppression
            --blacklist-path misc/cfn-nag-blacklist.yml
            --fail-on-warnings

      - name: Check cfn bestpractices with cfn_nag for prod
        if: steps.extract-branch.outputs.branch == 'prod'
        uses: stelligent/cfn_nag@master
        with:
          input_path: cdk.out/wm.template.json
          extra_args: |
            --print-suppression
            --blacklist-path misc/cfn-nag-blacklist.yml
            --fail-on-warnings

  deploy-dev:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: Cache CDK npm dependencies
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      - uses: actions/download-artifact@v2
        with:
          name: go-binaries-and-frontend

      - name: Fix file permissions
        run: |
          chmod -R 755 dist
          chmod -R 755 services/frontend/dist

      - name: Compile CDK typescript
        run: ./wm.sh build cdk

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      - name: Configure AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

        # DEPLOY TO dev if branch != prod
      - name: Deploy to dev
        if: steps.extract-branch.outputs.branch != 'prod'
        env:
          CDK_STACK: ${{ steps.cdk-stack.outputs.stack }}
        run: ./wm.sh deploy dev

        #DEPLOY TO PROD if branch == prod
#      - name: Configure AWS prod credentials
#        if: steps.extract-branch.outputs.branch == 'prod'
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Deploy to prod
#        if: steps.extract-branch.outputs.branch == 'prod'
#        env:
#          CDK_STACK: ${{ steps.cdk-prod-stack.outputs.stack }}
#        run: ./wm.sh deploy prod

  cdk-diff:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: Cache cdk npm dependencies
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      - uses: actions/download-artifact@v2
        with:
          name: go-binaries-and-frontend

      - name: Compile CDK typescript
        run: ./wm.sh build cdk

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      - name: Configure AWS prod credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Post CDK Diff as comment to PR
        if: steps.extract-branch.outputs.branch != 'prod'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: ./wm.sh diff prod

  lighthouse-landingpage:
    runs-on: ubuntu-latest
    needs: deploy-preprod
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      - name: Audit Dev Landingpgage
        if: steps.extract-branch.outputs.branch != 'prod'
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: |
            https://dev.wowmate.io/
          budgetPath: ./misc/budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: misc/.lighthouserc.json

      - name: Audit Prod Landingpgage
        if: steps.extract-branch.outputs.branch != 'prod'
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: |
            https://wowmate.io/
          budgetPath: ./misc/budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: misc/.lighthouserc.json

  lighthouse-mythicplus:
    runs-on: ubuntu-latest
    needs: deploy-preprod
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch

      - name: Audit Mythicplus page
        if: steps.extract-branch.outputs.branch != 'prod'
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: |
            https://dev.wowmate.io/mythicplus
          budgetPath: ./misc/budget-mythicplus.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: misc/.lighthouserc.json

      - name: Audit Mythicplus page
        if: steps.extract-branch.outputs.branch != 'prod'
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: |
            https://wowmate.io/mythicplus
          budgetPath: ./misc/budget-mythicplus.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: misc/.lighthouserc.json

  analyze-go:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'go'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  analyze-js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'javascript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  go-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.3'

      - name: Cache go deps
        uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
          restore-keys: go-

      - name: Lint Golang
        run: ./wm.sh lint go

  deploy-preprod:
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - analyze-go
      - analyze-js
      - cfn-nag
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: Cache CDK npm dependencies
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      - uses: actions/download-artifact@v2
        with:
          name: go-binaries-and-frontend

      - name: Fix file permissions
        run: |
          chmod -R 755 dist
          chmod -R 755 services/frontend/dist

      - name: Compile CDK typescript
        run: ./wm.sh build cdk

      - name: Configure AWS preprod credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

#      - name: Deploy to preprod
#        run: ./wm.sh deploy preprod

  lambda-integration-test:
    runs-on: ubuntu-latest
    needs:
      - deploy-preprod
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.3'

      - name: Configure AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run convert integration test
        run: |
          cd services/upload/convert-integration-test/
          go run .

  deploy-prod:
    runs-on: ubuntu-latest
    needs:
      - lighthouse-landingpage
      - lighthouse-mythicplus
      - lambda-integration-test
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: Cache CDK npm dependencies
        uses: actions/cache@v2
        id: cdk-cache
        with:
          path: node_modules
          key: cdk-${{ hashFiles('package-lock.json') }}
          restore-keys: cdk-

      - uses: actions/download-artifact@v2
        with:
          name: go-binaries-and-frontend

      - name: Fix file permissions
        run: |
          chmod -R 755 dist
          chmod -R 755 services/frontend/dist

      - name: Compile CDK typescript
        run: ./wm.sh build cdk

      - name: Configure AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

#      - name: Deploy to prod
#        run: ./wm.sh deploy prod
